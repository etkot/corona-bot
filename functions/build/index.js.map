{"version":3,"sources":["../src/index.js"],"names":["functions","require","express","cors","axios","dayjs","sendCorona","app","use","origin","post","config","telegram","token","split","req","res","isCallBackQuery","body","callback_query","isMessage","message","from","is_bot","status","send","commands","entities","map","entity","type","text","substring","offset","length","forEach","command","chat","id","exports","apiEndPoint","https","onRequest"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAM;AAAEK,EAAAA;AAAF,IAAiBL,OAAO,CAAC,UAAD,CAA9B,C,CAEA;;;AACA,MAAMM,GAAG,GAAGL,OAAO,EAAnB;AACAK,GAAG,CAACC,GAAJ,CAAQL,IAAI,CAAC;AAAEM,EAAAA,MAAM,EAAE;AAAV,CAAD,CAAZ,E,CAEA;;AACAF,GAAG,CAACG,IAAJ,CACG,IAAGV,SAAS,CAACW,MAAV,GAAmBC,QAAnB,CAA4BC,KAA5B,CAAkCC,KAAlC,CAAwC,GAAxC,EAA6C,CAA7C,CAAgD,EADtD,EAEE,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClB,QAAMC,eAAe,GAAGF,GAAG,CAACG,IAAJ,IAAYH,GAAG,CAACG,IAAJ,CAASC,cAA7C;AACA,QAAMC,SAAS,GAAGL,GAAG,CAACG,IAAJ,IAAYH,GAAG,CAACG,IAAJ,CAASG,OAAvC;;AAEA,MAAID,SAAJ,EAAe;AACb,UAAMC,OAAO,GAAGD,SAAhB;;AACA,QAAIC,OAAO,CAACC,IAAR,CAAaC,MAAjB,EAAyB;AACvBP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;AACA;AACD;;AACD,UAAMC,QAAQ,GACZL,OAAO,CAACM,QAAR,IACAN,OAAO,CAACM,QAAR,CAAiBC,GAAjB,CAAsBC,MAAD,IAAY;AAC/B,UAAIA,MAAM,CAACC,IAAP,KAAgB,aAApB,EAAmC;AACjC,eAAOT,OAAO,CAACU,IAAR,CAAaC,SAAb,CAAuBH,MAAM,CAACI,MAA9B,EAAsCJ,MAAM,CAACK,MAA7C,CAAP;AACD;;AACD,aAAO,EAAP;AACD,KALD,CAFF;;AASA,QAAIR,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACS,OAAT,CAAkBC,OAAD,IAAa;AAC5B,gBAAQA,OAAR;AACE,eAAK,SAAL;AACA,eAAK,yBAAL;AACE9B,YAAAA,UAAU,CAACe,OAAO,CAACgB,IAAR,CAAaC,EAAd,CAAV;AACA;;AAEF;AACE;AAPJ;AASD,OAVD;AAWD;AACF;;AAEDtB,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,IAAAA,MAAM,EAAE;AAAV,GAArB;AACD,CArCH,E,CAwCA;;AACAe,OAAO,CAACC,WAAR,GAAsBxC,SAAS,CAACyC,KAAV,CAAgBC,SAAhB,CAA0BnC,GAA1B,CAAtB","sourcesContent":["const functions = require(\"firebase-functions\");\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst axios = require(\"axios\");\n\nconst dayjs = require(\"dayjs\");\n\nconst { sendCorona } = require(\"./corona\");\n\n// Initialize web server\nconst app = express();\napp.use(cors({ origin: true }));\n\n// Handle post events (messages, etc.)\napp.post(\n  `/${functions.config().telegram.token.split(\":\")[1]}`,\n  async (req, res) => {\n    const isCallBackQuery = req.body && req.body.callback_query;\n    const isMessage = req.body && req.body.message;\n\n    if (isMessage) {\n      const message = isMessage;\n      if (message.from.is_bot) {\n        res.status(200).send(\"No bots allowed\");\n        return;\n      }\n      const commands =\n        message.entities &&\n        message.entities.map((entity) => {\n          if (entity.type === \"bot_command\") {\n            return message.text.substring(entity.offset, entity.length);\n          }\n          return \"\";\n        });\n\n      if (commands) {\n        commands.forEach((command) => {\n          switch (command) {\n            case \"/corona\":\n            case \"/corona@korona_chan_bot\":\n              sendCorona(message.chat.id);\n              break;\n\n            default:\n              break;\n          }\n        });\n      }\n    }\n\n    res.status(200).send({ status: \"not a telegram message\" });\n  }\n);\n\n// Send the http request forward to the express server\nexports.apiEndPoint = functions.https.onRequest(app);\n"],"file":"index.js"}